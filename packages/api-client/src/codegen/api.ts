/* tslint:disable */
/* eslint-disable */
/**
 * Smart Task Reminder API
 * Smart Task Reminder API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ReminderCreationDto
 */
export interface ReminderCreationDto {
    /**
     * 
     * @type {string}
     * @memberof ReminderCreationDto
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof ReminderCreationDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ReminderCreationDto
     */
    'datetime': string;
}
/**
 * 
 * @export
 * @interface ReminderResponseDto
 */
export interface ReminderResponseDto {
    /**
     * 
     * @type {string}
     * @memberof ReminderResponseDto
     */
    'uuid': string;
    /**
     * 
     * @type {string}
     * @memberof ReminderResponseDto
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof ReminderResponseDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ReminderResponseDto
     */
    'datetime': string;
    /**
     * 
     * @type {string}
     * @memberof ReminderResponseDto
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ReminderResponseDto
     */
    'completedAt': string | null;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {any} [xRequestedWith] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello: async (xRequestedWith?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRequestedWith != null) {
                localVarHeaderParameter['X-Requested-With'] = typeof xRequestedWith === 'string'
                    ? xRequestedWith
                    : JSON.stringify(xRequestedWith);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {any} [xRequestedWith] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetHello(xRequestedWith?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetHello(xRequestedWith, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {any} [xRequestedWith] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello(xRequestedWith?: any, options?: any): AxiosPromise<void> {
            return localVarFp.appControllerGetHello(xRequestedWith, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {any} [xRequestedWith] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appControllerGetHello(xRequestedWith?: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).appControllerGetHello(xRequestedWith, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ReminderApi - axios parameter creator
 * @export
 */
export const ReminderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * リマインダーを完了状態にする
         * @summary リマインダーを完了状態にする
         * @param {string} id 
         * @param {any} [xRequestedWith] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeReminder: async (id: string, xRequestedWith?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('completeReminder', 'id', id)
            const localVarPath = `/v1/reminders/{id}/complete`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRequestedWith != null) {
                localVarHeaderParameter['X-Requested-With'] = typeof xRequestedWith === 'string'
                    ? xRequestedWith
                    : JSON.stringify(xRequestedWith);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * リマインダーを登録する
         * @summary リマインダーを登録する
         * @param {ReminderCreationDto} reminderCreationDto 
         * @param {any} [xRequestedWith] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReminder: async (reminderCreationDto: ReminderCreationDto, xRequestedWith?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reminderCreationDto' is not null or undefined
            assertParamExists('createReminder', 'reminderCreationDto', reminderCreationDto)
            const localVarPath = `/v1/reminders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRequestedWith != null) {
                localVarHeaderParameter['X-Requested-With'] = typeof xRequestedWith === 'string'
                    ? xRequestedWith
                    : JSON.stringify(xRequestedWith);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reminderCreationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * リマインダー一覧を取得する
         * @summary リマインダー一覧を取得する
         * @param {any} [xRequestedWith] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReminders: async (xRequestedWith?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/reminders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRequestedWith != null) {
                localVarHeaderParameter['X-Requested-With'] = typeof xRequestedWith === 'string'
                    ? xRequestedWith
                    : JSON.stringify(xRequestedWith);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * リマインダーを削除する
         * @summary リマインダーを削除する
         * @param {string} id 
         * @param {any} [xRequestedWith] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeReminder: async (id: string, xRequestedWith?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('removeReminder', 'id', id)
            const localVarPath = `/v1/reminders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRequestedWith != null) {
                localVarHeaderParameter['X-Requested-With'] = typeof xRequestedWith === 'string'
                    ? xRequestedWith
                    : JSON.stringify(xRequestedWith);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReminderApi - functional programming interface
 * @export
 */
export const ReminderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReminderApiAxiosParamCreator(configuration)
    return {
        /**
         * リマインダーを完了状態にする
         * @summary リマインダーを完了状態にする
         * @param {string} id 
         * @param {any} [xRequestedWith] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completeReminder(id: string, xRequestedWith?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.completeReminder(id, xRequestedWith, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * リマインダーを登録する
         * @summary リマインダーを登録する
         * @param {ReminderCreationDto} reminderCreationDto 
         * @param {any} [xRequestedWith] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createReminder(reminderCreationDto: ReminderCreationDto, xRequestedWith?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReminderResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createReminder(reminderCreationDto, xRequestedWith, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * リマインダー一覧を取得する
         * @summary リマインダー一覧を取得する
         * @param {any} [xRequestedWith] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReminders(xRequestedWith?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ReminderResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReminders(xRequestedWith, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * リマインダーを削除する
         * @summary リマインダーを削除する
         * @param {string} id 
         * @param {any} [xRequestedWith] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeReminder(id: string, xRequestedWith?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeReminder(id, xRequestedWith, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReminderApi - factory interface
 * @export
 */
export const ReminderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReminderApiFp(configuration)
    return {
        /**
         * リマインダーを完了状態にする
         * @summary リマインダーを完了状態にする
         * @param {string} id 
         * @param {any} [xRequestedWith] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeReminder(id: string, xRequestedWith?: any, options?: any): AxiosPromise<void> {
            return localVarFp.completeReminder(id, xRequestedWith, options).then((request) => request(axios, basePath));
        },
        /**
         * リマインダーを登録する
         * @summary リマインダーを登録する
         * @param {ReminderCreationDto} reminderCreationDto 
         * @param {any} [xRequestedWith] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReminder(reminderCreationDto: ReminderCreationDto, xRequestedWith?: any, options?: any): AxiosPromise<ReminderResponseDto> {
            return localVarFp.createReminder(reminderCreationDto, xRequestedWith, options).then((request) => request(axios, basePath));
        },
        /**
         * リマインダー一覧を取得する
         * @summary リマインダー一覧を取得する
         * @param {any} [xRequestedWith] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReminders(xRequestedWith?: any, options?: any): AxiosPromise<Array<ReminderResponseDto>> {
            return localVarFp.getReminders(xRequestedWith, options).then((request) => request(axios, basePath));
        },
        /**
         * リマインダーを削除する
         * @summary リマインダーを削除する
         * @param {string} id 
         * @param {any} [xRequestedWith] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeReminder(id: string, xRequestedWith?: any, options?: any): AxiosPromise<void> {
            return localVarFp.removeReminder(id, xRequestedWith, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReminderApi - object-oriented interface
 * @export
 * @class ReminderApi
 * @extends {BaseAPI}
 */
export class ReminderApi extends BaseAPI {
    /**
     * リマインダーを完了状態にする
     * @summary リマインダーを完了状態にする
     * @param {string} id 
     * @param {any} [xRequestedWith] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReminderApi
     */
    public completeReminder(id: string, xRequestedWith?: any, options?: AxiosRequestConfig) {
        return ReminderApiFp(this.configuration).completeReminder(id, xRequestedWith, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * リマインダーを登録する
     * @summary リマインダーを登録する
     * @param {ReminderCreationDto} reminderCreationDto 
     * @param {any} [xRequestedWith] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReminderApi
     */
    public createReminder(reminderCreationDto: ReminderCreationDto, xRequestedWith?: any, options?: AxiosRequestConfig) {
        return ReminderApiFp(this.configuration).createReminder(reminderCreationDto, xRequestedWith, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * リマインダー一覧を取得する
     * @summary リマインダー一覧を取得する
     * @param {any} [xRequestedWith] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReminderApi
     */
    public getReminders(xRequestedWith?: any, options?: AxiosRequestConfig) {
        return ReminderApiFp(this.configuration).getReminders(xRequestedWith, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * リマインダーを削除する
     * @summary リマインダーを削除する
     * @param {string} id 
     * @param {any} [xRequestedWith] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReminderApi
     */
    public removeReminder(id: string, xRequestedWith?: any, options?: AxiosRequestConfig) {
        return ReminderApiFp(this.configuration).removeReminder(id, xRequestedWith, options).then((request) => request(this.axios, this.basePath));
    }
}



